// Generated by gencpp from file foxbot/robot_SpecialCommandRequest.msg
// DO NOT EDIT!


#ifndef FOXBOT_MESSAGE_ROBOT_SPECIALCOMMANDREQUEST_H
#define FOXBOT_MESSAGE_ROBOT_SPECIALCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace foxbot
{
template <class ContainerAllocator>
struct robot_SpecialCommandRequest_
{
  typedef robot_SpecialCommandRequest_<ContainerAllocator> Type;

  robot_SpecialCommandRequest_()
    : command(0)
    , param1(0.0)
    , param2(0.0)
    , param3(0.0)
    , param4(0.0)
    , param5(0.0)  {
    }
  robot_SpecialCommandRequest_(const ContainerAllocator& _alloc)
    : command(0)
    , param1(0.0)
    , param2(0.0)
    , param3(0.0)
    , param4(0.0)
    , param5(0.0)  {
    }



   typedef int64_t _command_type;
  _command_type command;

   typedef double _param1_type;
  _param1_type param1;

   typedef double _param2_type;
  _param2_type param2;

   typedef double _param3_type;
  _param3_type param3;

   typedef double _param4_type;
  _param4_type param4;

   typedef double _param5_type;
  _param5_type param5;




  typedef boost::shared_ptr< ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct robot_SpecialCommandRequest_

typedef ::foxbot::robot_SpecialCommandRequest_<std::allocator<void> > robot_SpecialCommandRequest;

typedef boost::shared_ptr< ::foxbot::robot_SpecialCommandRequest > robot_SpecialCommandRequestPtr;
typedef boost::shared_ptr< ::foxbot::robot_SpecialCommandRequest const> robot_SpecialCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace foxbot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'foxbot': ['/home/biomed/feroze_ws/src/foxbot/msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "35641a14d68eae4e3f43fd2e5282cc04";
  }

  static const char* value(const ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x35641a14d68eae4eULL;
  static const uint64_t static_value2 = 0x3f43fd2e5282cc04ULL;
};

template<class ContainerAllocator>
struct DataType< ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "foxbot/robot_SpecialCommandRequest";
  }

  static const char* value(const ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
int64 command\n\
float64 param1\n\
float64 param2\n\
float64 param3\n\
float64 param4\n\
float64 param5\n\
";
  }

  static const char* value(const ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.param1);
      stream.next(m.param2);
      stream.next(m.param3);
      stream.next(m.param4);
      stream.next(m.param5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct robot_SpecialCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::foxbot::robot_SpecialCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<int64_t>::stream(s, indent + "  ", v.command);
    s << indent << "param1: ";
    Printer<double>::stream(s, indent + "  ", v.param1);
    s << indent << "param2: ";
    Printer<double>::stream(s, indent + "  ", v.param2);
    s << indent << "param3: ";
    Printer<double>::stream(s, indent + "  ", v.param3);
    s << indent << "param4: ";
    Printer<double>::stream(s, indent + "  ", v.param4);
    s << indent << "param5: ";
    Printer<double>::stream(s, indent + "  ", v.param5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOXBOT_MESSAGE_ROBOT_SPECIALCOMMANDREQUEST_H
